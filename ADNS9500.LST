C51 COMPILER V7.20   ADNS9500                                                              06/11/2009 12:00:43 PAGE 1   


C51 COMPILER V7.20, COMPILATION OF MODULE ADNS9500
OBJECT MODULE PLACED IN ADNS9500.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe ADNS9500.c DB OE LARGE OT(0,SPEED)

line level    source

   1          //------------------------------------------------------------------------------------
   2          // Includes
   3          //------------------------------------------------------------------------------------
   4          #include <intrins.h>
   5          #include "c8051f3xx.h"
   6          //#include "adns9500_srom_8E.h"
   7          #include "ADNS9500.h"
   8          #include "delay.h"
   9          #include "timer.h"
  10          #include "spi.h"
  11          #include "F340_FlashPrimitives.h"
  12          
  13          //------------------------------------------------------------------------------------
  14          // CONSTANT
  15          //------------------------------------------------------------------------------------
  16          
  17          //------------------------------------------------------------------------------------
  18          // Global VARIABLES
  19          //------------------------------------------------------------------------------------
  20          data unsigned char lift_data;
  21          data unsigned char CFG0_data, CFG1_data;
  22          
  23          
  24          //------------------------------------------------------------------------------------
  25          // Function PROTOTYPES
  26          //------------------------------------------------------------------------------------
  27          void ADNS9500_Init(void);
  28          void ADNS9500_check_sequence(void);
  29          void ADNS9500_power_up_sequence(void);
  30          void ANDS9500_SROM_load_sequence(void);
  31          void ADNS9500_load_resolution(void);
  32          void ANDS9500_SROM_Download(void);
  33          void ADNS9500_laser_power_enable_sequence(void);
  34          unsigned char ADNS9500_SROM_Check(void);
  35          void A9500_OTP_WR(void);
  36          
  37          
  38          //------------------------------------------------------------------------------------
  39          // External Function PROTOTYPES
  40          //------------------------------------------------------------------------------------
  41          extern void update_led_status(unsigned char res);
  42          
  43          
  44          //------------------------------------------------------------------------------------
  45          // Main Functions
  46          //------------------------------------------------------------------------------------
  47          
  48          void ADNS9500_Init(void)
  49          {
  50   1              unsigned char spi_array[10];            
  51   1      
  52   1      //      EA = 0;
  53   1      
  54   1              ADNS9500_check_sequence();
  55   1              ADNS9500_power_up_sequence();
C51 COMPILER V7.20   ADNS9500                                                              06/11/2009 12:00:43 PAGE 2   

  56   1              ANDS9500_SROM_load_sequence();
  57   1              ADNS9500_load_resolution();
  58   1              
  59   1      //      spi_write_sensor(ADNS9500_LIFT_DETECTION_THR_ADDR, 0x10);
  60   1              lift_data = spi_read_sensor(ADNS9500_LIFT_DETECTION_THR_ADDR); //default at 0x10
  61   1              
  62   1              // Just read out for debugging purpose
  63   1              spi_array[0] = spi_read_sensor(ADNS9500_MOTION_ADDR);
  64   1              spi_array[1] = spi_read_sensor(ADNS9500_LASER_CTRL0_ADDR);
  65   1              spi_array[2] = spi_read_sensor(ADNS9500_LASER_CTRL1_ADDR);
  66   1              spi_array[3] = spi_read_sensor(ADNS9500_LP_CFG0_ADDR);
  67   1              spi_array[4] = spi_read_sensor(ADNS9500_LP_CFG1_ADDR);
  68   1              _nop_();
  69   1      
  70   1      //      EA = 1;
  71   1      
  72   1      //      CFG0_data = flash_data[0];
  73   1      //      CFG1_data = flash_data[1];
  74   1      
  75   1      //      if(CFG0_data != (~CFG1_data))
  76   1      //      {
  77   1      //              CFG0_data = DEFAULT_CFG0;
  78   1      //              CFG1_data = DEFAULT_CFG1;
  79   1      //      }
  80   1      //      spi_write_sensor(ADNS9500_LP_CFG0_ADDR, CFG0_data);
  81   1      //      spi_write_sensor(ADNS9500_LP_CFG1_ADDR, CFG1_data);
  82   1      
  83   1      }
  84          
  85          
  86          //------------------------------------------------------------------------------------
  87          // Sub Functions 
  88          //------------------------------------------------------------------------------------
  89          void ADNS9500_check_sequence(void)
  90          {
  91   1              //--------------------------------------
  92   1              // Local VARIABLES
  93   1              //--------------------------------------
  94   1              unsigned char spi_array[10];    
  95   1      
  96   1              //--------------------------------------
  97   1              // Local Sequence
  98   1              //--------------------------------------
  99   1              EA = 0;
 100   1              spi_array[0] = spi_read_sensor(ADNS9500_PRODUCTID_ADDR);                        
 101   1              spi_array[1] = spi_read_sensor(ADNS9500_REVISIONID_ADDR);
 102   1              spi_array[2] = spi_read_sensor(ADNS9500_INVERSE_PRODUCT_ID_ADDR);
 103   1              EA = 1;
 104   1      }
 105          
 106          
 107          void ADNS9500_power_up_sequence(void)
 108          {
 109   1              //--------------------------------------
 110   1              // Local VARIABLES
 111   1              //--------------------------------------
 112   1              unsigned char spi_array[10];    
 113   1      
 114   1              //--------------------------------------
 115   1              // Local Sequence
 116   1              //--------------------------------------
 117   1              EA = 0;
C51 COMPILER V7.20   ADNS9500                                                              06/11/2009 12:00:43 PAGE 3   

 118   1              spi_write_sensor(ADNS9500_POWER_UP_RESET_ADDR, ADNS9500_POWER_UP_RESET);
 119   1              EA = 1;
 120   1      
 121   1              //delay_ms(50);
 122   1              t1_data = TIMER1_50_MILISEC;    // x 0.5ms
 123   1              time_1 = 1;
 124   1              while(time_1 == 1);
 125   1      
 126   1              EA = 0;
 127   1              spi_array[0] = spi_read_sensor(ADNS9500_MOTION_ADDR);
 128   1              spi_array[1] = spi_read_sensor(ADNS9500_DELTAX_L_ADDR);
 129   1              spi_array[2] = spi_read_sensor(ADNS9500_DELTAX_H_ADDR);
 130   1              spi_array[3] = spi_read_sensor(ADNS9500_DELTAY_L_ADDR);
 131   1              spi_array[4] = spi_read_sensor(ADNS9500_DELTAY_H_ADDR);
 132   1              EA = 1;
 133   1      }
 134          
 135          
 136          void ANDS9500_SROM_load_sequence(void)
 137          {
 138   1              //--------------------------------------
 139   1              // Local VARIABLES
 140   1              //--------------------------------------
 141   1              unsigned char spi_temp;
 142   1              //--------------------------------------
 143   1              // Local Sequence
 144   1              //--------------------------------------
 145   1      #ifdef OTP_ENABLED
              //      A9500_OTP_WR();
              
              #endif
 149   1              spi_temp = FLASH_ByteRead(SROM_ADDR + 0x0C02);
 150   1      
 151   1              if(spi_temp == 1)
 152   1              {
 153   2                      ANDS9500_SROM_Download();
 154   2      
 155   2                      //delay_ms(1);
 156   2                      t1_data = TIMER1_1_MILISEC;     // x 0.5ms
 157   2                      time_1 = 1;
 158   2                      while(time_1 == 1);
 159   2      
 160   2                      ADNS9500_SROM_Check();
 161   2                      ADNS9500_laser_power_enable_sequence();
 162   2              }
 163   1      }
 164          
 165          
 166          void ADNS9500_load_resolution(void)
 167          {
 168   1              //--------------------------------------
 169   1              // Local VARIABLES
 170   1              //--------------------------------------
 171   1              //--------------------------------------
 172   1              // Local Sequence
 173   1              //--------------------------------------
 174   1              EA = 0;
 175   1              resolution = spi_read_eeprom(0x0000);                                                                           //load default resolution
 176   1              spi_write_sensor(ADNS9500_CONFIGURATION_I_ADDR, resolution); 
 177   1              EA = 1;
 178   1              update_led_status(resolution);
 179   1      }
C51 COMPILER V7.20   ADNS9500                                                              06/11/2009 12:00:43 PAGE 4   

 180          
 181          
 182          void ANDS9500_SROM_Download(void)
 183          {
 184   1              unsigned int temp_int;
 185   1      
 186   1              srom_size.b[0] = FLASH_ByteRead(SROM_ADDR + 0x0C00);
 187   1              srom_size.b[1] = FLASH_ByteRead(SROM_ADDR + 0x0C01);
 188   1      
 189   1              EA = 0;
 190   1              spi_write_sensor(ADNS9500_CONFIGURATION_IV_ADDR, ADNS9500_SROM_SIZE_3_0K);      // Select 3k SROM size
 191   1              EA = 1;
 192   1      
 193   1      //      delay_ms(1);    
 194   1              t1_data = TIMER1_1_MILISEC;     // x 0.5ms
 195   1              time_1 = 1;
 196   1              while(time_1 == 1);
 197   1      
 198   1              EA = 0;
 199   1              spi_write_sensor(ADNS9500_SROM_ENABLE_ADDR, 0x1D); 
 200   1              EA = 1;
 201   1      
 202   1      //      delay_ms(10);                                                                                                                           // Wait 1 frame period
 203   1              t1_data = TIMER1_10_MILISEC;    // x 0.5ms
 204   1              time_1 = 1;
 205   1              while(time_1 == 1);
 206   1      
 207   1              EA = 0;
 208   1              spi_write_sensor(ADNS9500_SROM_ENABLE_ADDR, 0x18);
 209   1              EA = 1;
 210   1              delay_us(120);
 211   1      
 212   1              NCS = 0;        
 213   1      
 214   1              delay_us(10);
 215   1      
 216   1              EA = 0;
 217   1              spi_transfer(ADNS9500_SROM_LOAD_BURST_ADDR | 0x80);
 218   1              EA = 1;
 219   1      
 220   1      //      delay_ms(10);
 221   1              t1_data = TIMER1_10_MILISEC;    // x 0.5ms
 222   1              time_1 = 1;
 223   1              while(time_1 == 1);
 224   1      
 225   1              EA = 0;
 226   1              for(temp_int = 0; temp_int < srom_size.w; temp_int++)
 227   1              {       
 228   2                      spi_transfer(FLASH_ByteRead(SROM_ADDR + temp_int));
 229   2                      delay_us(50);
 230   2              }
 231   1              EA = 1;
 232   1      
 233   1              delay_us(200);
 234   1      
 235   1              NCS = 1;
 236   1      }
 237          
 238          
 239          void ADNS9500_laser_power_enable_sequence(void)
 240          {
 241   1              //--------------------------------------
C51 COMPILER V7.20   ADNS9500                                                              06/11/2009 12:00:43 PAGE 5   

 242   1              // Local VARIABLES
 243   1              //--------------------------------------
 244   1              unsigned char temp;     
 245   1      
 246   1              //--------------------------------------
 247   1              // Local Sequence
 248   1              //--------------------------------------
 249   1              EA = 0;
 250   1              temp = spi_read_sensor(ADNS9500_LASER_CTRL0_ADDR);
 251   1              spi_write_sensor(ADNS9500_LASER_CTRL0_ADDR, (temp & 0xFE));                             // Enable Laser Power
 252   1              EA = 1;
 253   1      }
 254          
 255          
 256          unsigned char ADNS9500_SROM_Check(void)
 257          {
 258   1              unsigned char spi_array[10];
 259   1      
 260   1              EA = 0;
 261   1              spi_array[0] = spi_read_sensor(ADNS9500_SROM_ID_ADDR);                                  // Check SROM version
 262   1              EA = 1;
 263   1              delay_us(10);
 264   1      
 265   1              EA = 0;
 266   1              spi_array[1] = spi_read_sensor(ADNS9500_MOTION_ADDR);                                   // Check Fault
 267   1              EA = 1;
 268   1              delay_us(10);
 269   1      
 270   1              EA = 0;
 271   1              if((spi_array[1] & ADNS9500_MOTION_FAULT) == ADNS9500_MOTION_FAULT)
 272   1              {
 273   2                      EA = 1;
 274   2                      return 0;
 275   2              }
 276   1              EA = 1;
 277   1              
 278   1              EA = 0;
 279   1              spi_write_sensor(ADNS9500_SROM_ENABLE_ADDR, 0x15);                                              // Check CRC Test
 280   1              EA = 1;
 281   1      
 282   1              //delay_ms(50);                                                                                                                 // Wait 1 frame period
 283   1              t1_data = TIMER1_50_MILISEC;    // x 0.5ms
 284   1              time_1 = 1;
 285   1              while(time_1 == 1);
 286   1      
 287   1              EA = 0;
 288   1              spi_array[2] = spi_read_sensor(ADNS9500_DATA_OUT_LOWER_ADDR);                   
 289   1              delay_us(10);
 290   1      
 291   1              spi_array[3] = spi_read_sensor(ADNS9500_DATA_OUT_UPPER_ADDR);                   
 292   1              delay_us(10);
 293   1              EA = 1;
 294   1      
 295   1              EA = 0;
 296   1              if((spi_array[2] != 0xEF) || (spi_array[3] != 0xBE))
 297   1              {
 298   2                      EA = 1;
 299   2                      return 0;
 300   2              }
 301   1              EA = 1;
 302   1      
 303   1              EA = 0;
C51 COMPILER V7.20   ADNS9500                                                              06/11/2009 12:00:43 PAGE 6   

 304   1              spi_write_sensor(ADNS9500_OBSERVATION_ADDR, 0x00);                                              // Clear Observation Register
 305   1              delay_us(1);
 306   1      
 307   1              spi_array[4] = spi_read_sensor(ADNS9500_OBSERVATION_ADDR);                              // Check if SROM is running
 308   1              EA = 1;
 309   1              if((spi_array[4] & 0x40) == 0)
 310   1              {
 311   2                      return 0;
 312   2              }
 313   1      
 314   1              return 1;
 315   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    658    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     44    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
