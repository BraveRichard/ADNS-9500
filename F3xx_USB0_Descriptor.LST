C51 COMPILER V7.20   F3XX_USB0_DESCRIPTOR                                                  06/11/2009 12:00:42 PAGE 1   


C51 COMPILER V7.20, COMPILATION OF MODULE F3XX_USB0_DESCRIPTOR
OBJECT MODULE PLACED IN F3xx_USB0_Descriptor.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe F3xx_USB0_Descriptor.c DB OE LARGE OT(0,SPEED)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F3xx_USB0_Descriptor.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2005 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // Source file for USB firmware. Includes descriptor data.
  10          //
  11          //
  12          // How To Test:    See Readme.txt
  13          //
  14          //
  15          // FID
  16          // Target:         C8051F32x/C8051F340
  17          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  18          //                 Silicon Laboratories IDE version 2.6
  19          // Command Line:   See Readme.txt
  20          // Project Name:   F3xx_MouseExample
  21          //
  22          //
  23          // Release 1.1
  24          //    -Minor code comment changes
  25          //    -16 NOV 2006
  26          // Release 1.0
  27          //    -Initial Revision (PD)
  28          //    -07 DEC 2005
  29          //
  30          //-----------------------------------------------------------------------------
  31          // Includes
  32          //-----------------------------------------------------------------------------
  33          #include "F3xx_USB0_Register.h"
  34          #include "F3xx_USB0_InterruptServiceRoutine.h"
  35          #include "F3xx_USB0_Descriptor.h"
  36          
  37          //#define PIXEL_NUMBER 256
  38          
  39          #define LE(x)   ((((x)&0x00FF)<<8)|(((x)&0xFF00)>>8))   // convert to little endian
  40          //#define PIXEL_NUM_MSB         (unsigned char)(((PIXEL_NUMBER + 1) & 0xFF00)>>8) //msb of pixel number
  41          //#define PIXEL_NUM_LSB         (unsigned char) (PIXEL_NUMBER + 1) //lsb of pixel number
  42          
  43          
  44          //-----------------------------------------------------------------------------
  45          // Descriptor Declarations
  46          //-----------------------------------------------------------------------------
  47          
  48          const device_descriptor DEVICEDESC =
  49          {
  50             18,                                 // bLength
  51             0x01,                               // bDescriptorType
  52             0x1001,                             // bcdUSB
  53             0x00,                               // bDeviceClass
  54             0x00,                               // bDeviceSubClass
  55             0x00,                               // bDeviceProtocol
C51 COMPILER V7.20   F3XX_USB0_DESCRIPTOR                                                  06/11/2009 12:00:42 PAGE 2   

  56             EP0_PACKET_SIZE,                    // bMaxPacketSize0
  57             LE(0x192F),                         // idVendor
  58             LE(0x0000),                         // idProduct
  59             0x0000,                             // bcdDevice
  60             0x01,                               // iManufacturer
  61             0x02,                               // iProduct
  62             0x00,                               // iSerialNumber
  63             0x01                                // bNumConfigurations
  64          }; //end of DEVICEDESC
  65          
  66          // From "USB Device Class Definition for Human Interface Devices (HID)".
  67          // Section 7.1:
  68          // "When a Get_Descriptor(Configuration) request is issued,
  69          // it returns the Configuration descriptor, all Interface descriptors,
  70          // all Endpoint descriptors, and the HID descriptor for each interface."
  71          const hid_configuration_descriptor HIDCONFIGDESC =
  72          {
  73          
  74          { // configuration_descriptor hid_configuration_descriptor
  75             0x09,                               // Length
  76             0x02,                               // Type
  77             0x2200,                             // Totallength (= 9+9+9+7)
  78             0x01,                               // NumInterfaces
  79             0x01,                               // bConfigurationValue
  80             0x00,                               // iConfiguration
  81             0x80,                               // bmAttributes
  82             0x20                                // MaxPower (in 2mA units)
  83          },
  84          
  85          { // interface_descriptor hid_interface_descriptor
  86             0x09,                               // bLength
  87             0x04,                               // bDescriptorType
  88             0x00,                               // bInterfaceNumber
  89             0x00,                               // bAlternateSetting
  90             0x01,                               // bNumEndpoints
  91             0x03,                               // bInterfaceClass (3 = HID)
  92             0x01,                               // bInterfaceSubClass
  93             0x02,                               // bInterfaceProcotol
  94             0x00                                // iInterface
  95          },
  96          
  97          { // class_descriptor hid_descriptor
  98                  0x09,                                 // bLength
  99                  0x21,                                 // bDescriptorType
 100                  0x0101,                            // bcdHID
 101                  0x00,                                 // bCountryCode
 102                  0x01,                                 // bNumDescriptors
 103                  0x22,                               // bDescriptorType
 104                  HID_REPORT_DESCRIPTOR_SIZE_LE       // wItemLength (tot. len. of report
 105                                                 // descriptor)
 106          },
 107          
 108          // IN endpoint (mandatory for HID)
 109          { // endpoint_descriptor hid_endpoint_in_descriptor
 110             0x07,                               // bLength
 111             0x05,                               // bDescriptorType
 112             0x81,                               // bEndpointAddress
 113             0x03,                               // bmAttributes
 114             EP1_PACKET_SIZE_LE,                 // MaxPacketSize (LITTLE ENDIAN)
 115             1                                   // bInterval
 116          },
 117          
C51 COMPILER V7.20   F3XX_USB0_DESCRIPTOR                                                  06/11/2009 12:00:42 PAGE 3   

 118          // OUT endpoint (optional for HID)
 119          { // endpoint_descriptor hid_endpoint_out_descriptor
 120             0x07,                               // bLength
 121             0x05,                               // bDescriptorType
 122             0x01,                               // bEndpointAddress
 123             0x03,                               // bmAttributes
 124             EP2_PACKET_SIZE_LE,                 // MaxPacketSize (LITTLE ENDIAN)
 125             1                                   // bInterval
 126          }
 127          };
 128          
 129          
 130          const hid_configuration_descriptor HIDCONFIGDESC1 =
 131          {
 132          
 133          { // configuration_descriptor hid_configuration_descriptor
 134             0x09,                               // Length
 135             0x02,                               // Type
 136             0x2200,                             // Totallength (= 9+9+9+7)
 137             0x01,                               // NumInterfaces
 138             0x01,                               // bConfigurationValue
 139             0x00,                               // iConfiguration
 140             0x80,                               // bmAttributes
 141             0x20                                // MaxPower (in 2mA units)
 142          },
 143          
 144          { // interface_descriptor hid_interface_descriptor
 145             0x09,                               // bLength
 146             0x04,                               // bDescriptorType
 147             0x00,                               // bInterfaceNumber
 148             0x00,                               // bAlternateSetting
 149             0x01,                               // bNumEndpoints
 150             0x03,                               // bInterfaceClass (3 = HID)
 151             0x00,                               // bInterfaceSubClass
 152             0x00,                               // bInterfaceProcotol
 153             0x00                                // iInterface
 154          },
 155          
 156          { // class_descriptor hid_descriptor
 157                  0x09,                                 // bLength
 158                  0x21,                                 // bDescriptorType
 159                  0x0101,                            // bcdHID
 160                  0x00,                                 // bCountryCode
 161                  0x01,                                 // bNumDescriptors
 162                  0x22,                               // bDescriptorType
 163                  HID_REPORT_DESCRIPTOR1_SIZE_LE       // wItemLength (tot. len. of report
 164                                                 // descriptor)
 165          },
 166          
 167          // IN endpoint (mandatory for HID)
 168          { // endpoint_descriptor hid_endpoint_in_descriptor
 169             0x07,                               // bLength
 170             0x05,                               // bDescriptorType
 171             0x81,                               // bEndpointAddress
 172             0x03,                               // bmAttributes
 173             EP1_PACKET_SIZE_LE,                 // MaxPacketSize (LITTLE ENDIAN)
 174             1                                   // bInterval
 175          },
 176          
 177          // OUT endpoint (optional for HID)
 178          { // endpoint_descriptor hid_endpoint_out_descriptor
 179             0x07,                               // bLength
C51 COMPILER V7.20   F3XX_USB0_DESCRIPTOR                                                  06/11/2009 12:00:42 PAGE 4   

 180             0x05,                               // bDescriptorType
 181             0x01,                               // bEndpointAddress
 182             0x03,                               // bmAttributes
 183             EP2_PACKET_SIZE_LE,                 // MaxPacketSize (LITTLE ENDIAN)
 184             1                                   // bInterval
 185          }
 186          
 187          };
 188          
 189          // full speed 16 bit reporting 
 190          const hid_report_descriptor HIDREPORTDESC =
 191          {
 192              0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
 193              0x09, 0x02,                    // USAGE (Mouse)
 194              0xa1, 0x01,                    // COLLECTION (Application)
 195                  0x85, 0x01,                                //   REPORT ID (0x01)
 196              0x09, 0x01,                    //   USAGE (Pointer)
 197              0xa1, 0x00,                    //   COLLECTION (Physical)
 198              0x05, 0x09,                    //     USAGE_PAGE (Button)
 199              0x19, 0x01,                    //     USAGE_MINIMUM (Button 1)
 200              0x29, 0x03,                    //     USAGE_MAXIMUM (Button 3)
 201              0x15, 0x00,                    //     LOGICAL_MINIMUM (0)
 202              0x25, 0x01,                    //     LOGICAL_MAXIMUM (1)
 203              0x95, 0x03,                    //     REPORT_COUNT (3)
 204              0x75, 0x01,                    //     REPORT_SIZE (1)
 205              0x81, 0x02,                    //     INPUT (Data,Var,Abs)
 206              0x95, 0x01,                    //     REPORT_COUNT (1)
 207              0x75, 0x05,                    //     REPORT_SIZE (5)
 208              0x81, 0x01,                    //     INPUT (Cnst,Ary,Abs)
 209              0x06, 0x00, 0xff,              //     USAGE_PAGE (Vendor Defined Page 1)
 210              0x09, 0x40,                    //     USAGE (Undefined)
 211              0x95, 0x02,                    //     REPORT_COUNT (2)
 212              0x75, 0x08,                    //     REPORT_SIZE (8)
 213              0x15, 0x81,                    //     LOGICAL_MINIMUM (-127)
 214              0x25, 0x7f,                    //     LOGICAL_MAXIMUM (127)
 215              0x81, 0x02,                    //     INPUT (Data,Var,Abs)
 216              0x05, 0x01,                    //     USAGE_PAGE (Generic Desktop)
 217              0x09, 0x38,                    //     USAGE (Wheel)
 218              0x15, 0x81,                    //     LOGICAL_MINIMUM (-127)
 219              0x25, 0x7f,                    //     LOGICAL_MAXIMUM (127)
 220              0x75, 0x08,                    //     REPORT_SIZE (8)
 221              0x95, 0x01,                    //     REPORT_COUNT (1)
 222              0x81, 0x06,                    //     INPUT (Data,Var,Rel)
 223              0x09, 0x30,                    //     USAGE (X)
 224              0x09, 0x31,                    //     USAGE (Y)
 225              0x16, 0x00, 0x80,              //     LOGICAL_MINIMUM (-32768)
 226              0x26, 0xff, 0x7f,              //     LOGICAL_MAXIMUM (32767)
 227              0x75, 0x10,                    //     REPORT_SIZE (16)
 228              0x95, 0x02,                    //     REPORT_COUNT (2)
 229              0x81, 0x06,                    //     INPUT (Data,Var,Rel)
 230              0x06, 0x00, 0xff,              //     USAGE_PAGE (Vendor Defined Page 1)
 231              0x09, 0x01,                    //     USAGE (Vendor Usage 1)
 232              0x15, 0x80,                    //     LOGICAL_MINIMUM (-128)
 233              0x25, 0x7f,                    //     LOGICAL_MAXIMUM (127)
 234              0x75, 0x08,                    //     REPORT_SIZE (8)
 235                  0x95, 0x03,                    //     REPORT_COUNT (3)
 236              0xb1, 0x02,                    //     FEATURE (Data,Var,Abs)
 237              0xc0,                          //   END_COLLECTION
 238                  0xc0,                          // END_COLLECTION
 239          
 240              0x06, 0x00, 0xff,              // USAGE_PAGE (Vendor Defined Page 1)
 241              0x09, 0x01,                    // USAGE (Vendor Usage 1)
C51 COMPILER V7.20   F3XX_USB0_DESCRIPTOR                                                  06/11/2009 12:00:42 PAGE 5   

 242                  0xa1, 0x01,                    // COLLECTION (Application)
 243                  0x85, 0x02,                                //   REPORT ID (0x02)
 244                  0xa1, 0x00,                    //   COLLECTION (Physical)
 245                  0x09, 0x02,                    //   USAGE (Vendor Usage 1)      
 246              0x15, 0x80,                    //   LOGICAL_MINIMUM (-128)
 247              0x25, 0x7f,                    //   LOGICAL_MAXIMUM (127)
 248              0x75, 0x08,                    //   REPORT_SIZE (8)
 249                  0x96, 0xC3, 0x01,              //   REPORT_COUNT (451)
 250              0xb1, 0x02,                    //   FEATURE (Data,Var,Abs)
 251                  0xc0,                          //       END_COLLECTION
 252              0xc0                          // END_COLLECTION
 253          };
 254          
 255          /* low spd descriptor 8 bit reporting
 256          const hid_report_descriptor HIDREPORTDESC =
 257          {
 258              0x05, 0x01,                        // Usage Page (Generic Desktop)
 259              0x09, 0x02,                        // Usage (Mouse)
 260              0xA1, 0x01,                        // Collection (Application)
 261                  0x85, 0x01,                                        //   REPORT ID (0x01)
 262              0x09, 0x01,                        //   Usage (Pointer)
 263              0xA1, 0x00,                        //   Collection (Physical)
 264              0x05, 0x09,                        //     Usage Page (Buttons)
 265              0x19, 0x01,                        //     Usage Minimum (1)
 266              0x29, 0x03,                        //     Usage Maximum (3)
 267              0x15, 0x00,                        //     Logical Minimum (0)
 268              0x25, 0x01,                        //     Logical Maximum (1)
 269              0x95, 0x03,                        //     Report Count (1)
 270              0x75, 0x01,                        //     Report Size (1)
 271              0x81, 0x02,                        //     Input (Data, Variable, Absolute)
 272              0x95, 0x01,                        //     Report Count (1)
 273              0x75, 0x05,                        //     Report Size (5)
 274              0x81, 0x01,                        //     Input (Constant) for padding
 275              0x05, 0x01,                        //     Usage Page (Generic Desktop)
 276              0x09, 0x30,                        //     Usage (X)
 277              0x09, 0x31,                        //     Usage (Y)
 278              0x09, 0x38,                            //     USAGE (Wheel)
 279              0x15, 0x81,                        //     Logical Minimum (-127)
 280              0x25, 0x7F,                        //     Logical Maximum (127)
 281              0x75, 0x08,                        //     Report Size (8)
 282              0x95, 0x03,                        //     Report Count (3)
 283              0x81, 0x06,                        //     Input (Data, Variable, Relative)
 284          
 285                  0x06, 0x00, 0xff,              //     USAGE_PAGE (Vendor Defined Page 1)
 286              0x09, 0x01,                    //     USAGE (Vendor Usage 1)
 287              0x15, 0x80,                    //     LOGICAL_MINIMUM (-128)
 288              0x25, 0x7f,                    //     LOGICAL_MAXIMUM (127)
 289              0x75, 0x08,                    //     REPORT_SIZE (8)
 290                  0x95, 0x03,                    //     REPORT_COUNT (3)
 291              0xb1, 0x02,                    //     FEATURE (Data,Var,Abs)
 292          
 293              0xC0,                              //   End Collection (Physical)
 294              0xC0,                               // End Collection (Application)
 295          //0x45                             // End Collection (Application)
 296          
 297                  0x06, 0x00, 0xff,              // USAGE_PAGE (Vendor Defined Page 1)
 298              0x09, 0x01,                    // USAGE (Vendor Usage 1)
 299                  0xa1, 0x01,                    // COLLECTION (Application)
 300                  0x85, 0x02,                                //   REPORT ID (0x02)
 301                  0xa1, 0x00,                    //   COLLECTION (Physical)
 302                  0x09, 0x02,                    //   USAGE (Vendor Usage 1)      
 303              0x15, 0x80,                    //   LOGICAL_MINIMUM (-128)
C51 COMPILER V7.20   F3XX_USB0_DESCRIPTOR                                                  06/11/2009 12:00:42 PAGE 6   

 304              0x25, 0x7f,                    //   LOGICAL_MAXIMUM (127)
 305              0x75, 0x08,                    //   REPORT_SIZE (8)
 306                  0x96, PIXEL_NUM_LSB, PIXEL_NUM_MSB,     //   REPORT_COUNT (451)
 307              0xb1, 0x02,                    //   FEATURE (Data,Var,Abs)
 308                  0xc0,                          //       END_COLLECTION
 309              0xc0                          // END_COLLECTION
 310          //0x1A
 311          ////0x5f
 312          
 313          }; */
 314          
 315          
 316          const unsigned char HIDREPORTDESC1[] =
 317          {
 318              0x06, 0xA0, 0xff,                           // USAGE_PAGE (Vendor Defined Page 1)
 319              0x09, 0x01,                                         // USAGE (Vendor Usage 1)
 320              0xa1, 0x01,                                         // COLLECTION (Application)
 321              0x09, 0x02,                                         //   USAGE (Vendor Usage 2)
 322              0xa1, 0x00,                                         //   COLLECTION (Physical)
 323              0x06, 0xA1, 0xff,                           //     USAGE_PAGE (Vendor Defined Page 1)
 324              0x09, 0x03,                                         //     USAGE (Vendor Usage 3)
 325              0x09, 0x04,                                         //     USAGE (Vendor Usage 4)
 326              0x15, 0x80,                                         //     LOGICAL_MINIMUM (-128)
 327              0x25, 0x7f,                                         //     LOGICAL_MAXIMUM (127)
 328              0x35, 0x00,                                         //     PHYSICAL_MINIMUM (0)
 329              0x45, 0xff,                                         //     PHYSICAL_MAXIMUM (255)
 330              0x75, 0x08,                                         //     REPORT_SIZE (8)
 331              0x95, 0x03,                                         //     REPORT_COUNT (3)
 332              0x81, 0x02,                                         //     INPUT (Data,Var,Abs)
 333              0x09, 0x05,                                         //     USAGE (Vendor Usage 5)
 334              0x09, 0x06,                                         //     USAGE (Vendor Usage 6)
 335              0x15, 0x80,                                         //     LOGICAL_MINIMUM (-128)
 336              0x25, 0x7f,                                         //     LOGICAL_MAXIMUM (127)
 337              0x35, 0x00,                                         //     PHYSICAL_MINIMUM (0)
 338              0x45, 0xff,                                         //     PHYSICAL_MAXIMUM (255)
 339              0x75, 0x08,                                         //     REPORT_SIZE (8)
 340              0x95, 0x03,                                         //     REPORT_COUNT (3)
 341              0x91, 0x02,                                         //     OUTPUT (Data,Var,Abs)
 342              0xc0,                                                       //   END_COLLECTION
 343              0xc0                                                        // END_COLLECTION
 344          };
 345          #define STR0LEN 4
 346          
 347          code const unsigned char String0Desc [STR0LEN] =
 348          {
 349             STR0LEN, 0x03, 0x09, 0x04
 350          }; //end of String0Desc
 351          
 352          #define STR1LEN sizeof ("AVAGO TECHNOLOGIES") * 2
 353          
 354          code const unsigned char String1Desc [STR1LEN] =
 355          {
 356             STR1LEN, 0x03,
 357             'A', 0,
 358             'V', 0,
 359             'A', 0,
 360             'G', 0,
 361             'O', 0,
 362             ' ', 0,
 363             'T', 0,
 364             'E', 0,
 365             'C', 0,
C51 COMPILER V7.20   F3XX_USB0_DESCRIPTOR                                                  06/11/2009 12:00:42 PAGE 7   

 366             'H', 0,
 367             'N', 0,
 368             'O', 0,
 369             'L', 0,
 370             'O', 0,
 371             'G', 0,
 372             'I', 0,
 373             'E', 0,
 374             'S', 0
 375          }; //end of String1Desc
 376          
 377          #define STR2LEN sizeof ("AVAGO ADNS-9500") * 2
 378          
 379          code const unsigned char String2Desc [STR2LEN] =
 380          {
 381             STR2LEN, 0x03,
 382             'A', 0,
 383             'V', 0,
 384             'A', 0,
 385             'G', 0,
 386             'O', 0,
 387             ' ', 0,
 388             'A', 0,
 389             'D', 0,
 390             'N', 0,
 391             'S', 0,
 392             '-', 0,
 393             '9', 0,
 394             '5', 0,
 395             '0', 0,
 396             '0', 0
 397          }; //end of String2Desc
 398          
 399          unsigned char* const STRINGDESCTABLE [] =
 400          {
 401             String0Desc,
 402             String1Desc,
 403             String2Desc
 404          };


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    156    ----
   XDATA SIZE       =    201    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
